generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model User {
  id                   Int                     @id @default(autoincrement())
  externalId           String?                 @unique
  email                String?                 @db.VarChar(255)
  name                 String?                 @db.VarChar(255)
  avatar               String?                 @db.VarChar(255)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  AmountsMovements     AdminMovementsAmounts[]
  coupons              Coupon[]
  invoices             Invoice[]
  Membership           Membership?
  Notification         Notification[]
  refer                Referral[]              @relation("refer")
  referredBy           Referral[]              @relation("referred")
  StripeCustomer       StripeCustomer[]
  SupportTicket        SupportTicket[]
  SupportTicketMessage SupportTicketMessage[]
  Amounts              UserAmounts[]
  UserCapabilities     UserCapabilities[]
  UserNotes            UserNotes[]
  UserSetting          UserSetting[]
  UserStatus           UserStatus[]
  vehicles             Vehicle[]
  permissions          Permission[]            @relation("PermissionToUser")
}

model StripeCustomer {
  id         Int      @id @default(autoincrement())
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Invoice {
  id                     Int              @id @default(autoincrement())
  type                   InvoiceModelType @default(MEMBERSHIP)
  membershipId           Int?
  serviceId              Int?
  status                 InvoiceStatus    @default(PENDING)
  userId                 Int?
  currencyId             Int              @default(1)
  userCustomerExternalId String?          @db.VarChar(512)
  gateway                String?          @db.VarChar(56)
  gatewayId              String?          @db.VarChar(512)
  details                String?          @db.VarChar(512)
  invoiceUrl             String?          @db.VarChar(512)
  invoicePdfUrl          String?          @db.VarChar(512)
  subscriptionExternalId String?          @db.VarChar(512)
  paidAt                 DateTime?
  notifiedAt             DateTime?
  dueAt                  DateTime?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  Currency               AdminCurrencies  @relation(fields: [currencyId], references: [id])
  user                   User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Items                  InvoiceItem[]
  coupons                Coupon[]         @relation("CouponToInvoice")

  @@index([userId, currencyId, serviceId])
}

model Coupon {
  id                Int              @id @default(autoincrement())
  userId            Int?
  name              String
  code              String           @unique
  amountOff         Float?
  duration          CouponDuration   @default(FOREVER)
  durationInMonths  Int?
  maxRedemptions    Int?
  percentOff        Float?
  status            String           @default("ACTIVE")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  adminCurrenciesId Int?
  AdminCurrencies   AdminCurrencies? @relation(fields: [adminCurrenciesId], references: [id])
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings          CouponSettings[]
  invoices          Invoice[]        @relation("CouponToInvoice")

  @@index([userId])
}

model CouponSettings {
  id        Int      @id @default(autoincrement())
  couponId  Int
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@index([couponId])
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  currencies  String?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  name        String
  description String?
  modelType   String?
  modelId     Int?
  pricingBdId Int?
  pricingId   String?
  images      String?
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model UserStatus {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(512)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  statusUntil DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Membership {
  id               Int              @id @default(autoincrement())
  userId           Int              @unique
  planId           Int
  pricingId        Int?
  currencyId       Int?             @default(1)
  startDate        DateTime
  endDateFreeTrial DateTime?
  endDate          DateTime
  createdAt        DateTime         @default(now())
  currency         AdminCurrencies? @relation(fields: [currencyId], references: [id])
  plan             Plan             @relation(fields: [planId], references: [id], onDelete: Cascade)
  pricing          Pricing?         @relation(fields: [pricingId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, pricingId])
}

model Plan {
  id               Int                @id @default(autoincrement())
  name             String
  stripeProductId  String?
  freeTrialDays    Int?
  status           String             @default("ACTIVE")
  description      String?
  Membership       Membership[]
  PlanCapabilities PlanCapabilities[]
  pricing          Pricing[]
  Permission       Permission[]       @relation("PermissionToPlan")
}

model Pricing {
  id         Int              @id @default(autoincrement())
  frequency  frequencyType    @default(YEARLY)
  status     String           @default("ACTIVE")
  price      Float
  oldPrice   Float?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  planId     Int?
  serviceId  Int?
  Membership Membership[]
  Plan       Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  settings   PricingSetting[]

  @@index([planId, serviceId])
}

model PricingSetting {
  id           Int      @id @default(autoincrement())
  settingName  String
  settingValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  pricingId    Int?
  Pricing      Pricing? @relation(fields: [pricingId], references: [id])

  @@index([pricingId])
}

model Module {
  id          Int          @id @default(autoincrement())
  name        String
  scope       ScopeType    @default(SUPERADMIN)
  status      Status       @default(ACTIVE)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Permission  Permission[] @relation("ModuleToPermission")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  Module      Module[] @relation("ModuleToPermission")
  Plan        Plan[]   @relation("PermissionToPlan")
  users       User[]   @relation("PermissionToUser")
}

model AdminKpi {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id         Int  @id @default(autoincrement())
  referId    Int
  referredId Int
  refer      User @relation("refer", fields: [referId], references: [id], onDelete: Cascade)
  referred   User @relation("referred", fields: [referredId], references: [id])

  @@index([referId, referredId])
}

model Capabilitie {
  id               Int                @id @default(autoincrement())
  name             String
  title            String?
  description      String?
  type             String             @default("LIMIT")
  PlanCapabilities PlanCapabilities[]
  UserCapabilities UserCapabilities[]
}

model PlanCapabilities {
  id            Int         @id @default(autoincrement())
  capabilitieId Int
  planId        Int
  count         Int
  name          String?
  capabilitie   Capabilitie @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)
  plan          Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId, capabilitieId])
}

model UserCapabilities {
  id            Int         @id @default(autoincrement())
  capabilitieId Int
  userId        Int
  count         Int
  capabilitie   Capabilitie @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, capabilitieId])
}

model UserSetting {
  id           Int    @id @default(autoincrement())
  userId       Int
  settingName  String @db.VarChar(128)
  settingValue String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SuperAdminSetting {
  id           Int    @id @default(autoincrement())
  settingName  String @db.VarChar(128)
  settingValue String
}

model CronJobs {
  id        Int      @id @default(autoincrement())
  name      String
  error     String?
  excuteAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNotes {
  id        Int               @id @default(autoincrement())
  scope     UserNoteScopeType @default(PLATFORM)
  userId    Int
  noteName  String            @db.VarChar(128)
  noteValue String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  content   String
  image     String
  viewed    Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminCurrencies {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(11)
  main                  Int                     @default(0)
  code                  String                  @db.VarChar(11)
  rate                  Float
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AdminMovementsAmounts AdminMovementsAmounts[]
  Coupon                Coupon[]
  invoices              Invoice[]
  Membership            Membership[]
  UserAmounts           UserAmounts[]
}

model UserAmounts {
  id             Int             @id @default(autoincrement())
  userId         Int
  currencyId     Int             @default(1)
  amount         Float           @default(0)
  amount_pending Float           @default(0)
  amount_stopad  Float           @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Currency       AdminCurrencies @relation(fields: [currencyId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([currencyId])
}

model AdminMovementsAmounts {
  id         BigInt             @id @default(autoincrement())
  userId     Int?
  details    String             @db.VarChar(128)
  currencyId Int
  amount     Float
  type       MovementAmountType @default(CREDIT)
  status     Status             @default(COMPLETED)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  Currency   AdminCurrencies    @relation(fields: [currencyId], references: [id])
  user       User?              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([currencyId])
}

model SupportTicket {
  id                   Int                     @id @default(autoincrement())
  subject              String
  departament          SupportDepartamentType  @default(SALES)
  status               SupportTicketStatusType @default(OPEN)
  userId               Int?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  user                 User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  SupportTicketMessage SupportTicketMessage[]

  @@index([userId])
}

model SupportTicketMessage {
  id                          Int                           @id @default(autoincrement())
  ticketId                    Int
  userId                      Int?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  ticket                      SupportTicket                 @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  SupportTicketMessageContent SupportTicketMessageContent[]

  @@index([ticketId, userId])
}

model SupportTicketMessageContent {
  id        Int                    @id @default(autoincrement())
  messageId Int
  type      PublicationContentType @default(TEXT)
  content   String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  ticket    SupportTicketMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model EnodeToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Vehicle {
  id                                       String   @id
  vin                                      String?  @unique
  vehicleId                                String?  @unique
  model                                    String?
  year                                     Int?
  batteryCapacity                          Int?
  ownerID                                  Int?
  soc                                      Int?
  dateOfConnection                         DateTime @map("dateOfConnection")
  odometerFloat                            Float?
  usageAverageDailyKmDriven                Float[]
  monthlyUsage                             Float[]
  condition                                String?
  status                                   String?
  make                                     String?
  batteryHealthSoH                         Float?
  batteryHealthDegradation                 Float?
  location                                 String?
  soh                                      Float[]
  batteryHealthAverageEstimatedDegradation Float[]
  batteryHealthAverageSoC                  Float?
  batteryHealthTotalBatteries              Int?
  connectorType                            String?
  endOfLife                                String?
  realRangeObserved                        Int?
  remainingUsefulLife                      String?
  totalChargingSession                     Int?
  totalEnergyConsumed                      String?
  vehicleConditionCritical                 Int?
  vehicleConditionGood                     Int?
  vehicleConditionSatisfactory             Int?
  vehicleStatusActive                      Int?
  vehicleStatusCharging                    Int?
  vehicleStatusInUse                       Int?
  vehicleStatusOutOfService                Int?
  epawltpProvidedRange                     Int?
  usageRangeObservedMax                    Int?
  usageRangeObservedMin                    Int?
  usageSoCRangeMax                         Int?
  usageSoCRangeMin                         Int?
  usageTemperatureHigh                     Int?
  usageTemperatureLow                      Int?
  batteryChemistry                         String?
  batteryHealthAverageSoH                  Float?
  dataPointsCollected                      Int?
  averageMonthlyUsage                      Float?
  ownerId                                  Int
  activeStatusCount                        Int?
  avgBatteryHealthSoH                      Float?
  avgDailyKmDriven                         Float[]
  avgEstimatedDegradation                  Float[]
  avgMonthlyUsage                          Float?
  avgSoC                                   Float?
  chargingStatusCount                      Int?
  criticalConditionCount                   Int?
  endOfLifeEstimate                        String?
  goodConditionCount                       Int?
  inUseStatusCount                         Int?
  maxObservedRange                         Int?
  maxSoCRange                              Int?
  maxTemperature                           Int?
  minObservedRange                         Int?
  minSoCRange                              Int?
  minTemperature                           Int?
  observedRange                            Int?
  odometerReading                          Float?
  outOfServiceStatusCount                  Int?
  providedRangeEPAWLTP                     Int?
  satisfactoryConditionCount               Int?
  totalBatteries                           Int?
  totalChargingSessions                    Int?
  owner                                    User     @relation(fields: [ownerId], references: [id])
}

model VehicleTripSession {
  id                    Int       @id @default(autoincrement())
  vehicleId             String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  BatteryAtEnd          Int?
  BatteryAtStart        Int?
  DiffInBat             Int?
  DiffInDte             Int?
  DteEnd                Int?
  DteStart              Int?
  DwUpdated             DateTime?
  TripApprovedKilometer Float?
  TripID                Float?
}

model ChargerMaster {
  id              Int       @id @default(autoincrement())
  chargingPoint   String
  chargerId       Int       @unique
  chargeType      String?
  chargerLocation String?
  chargerStatus   String?
  dateJoining     DateTime?
}

model ChargingSession {
  id             Int       @id @default(autoincrement())
  BatteryAtEnd   Int?
  BatteryAtStart Int?
  ChargingType   String?
  DiffInBat      Int?
  DiffInDte      Int?
  DteEnd         Int?
  DteStart       Int?
  DwUpdated      DateTime?
  TripID         Float?
  chargerId      Int?
  updatedAt      DateTime? @default(now())
  vehicleId      String?
}

model ChargerType {
  id                   Int    @id @default(autoincrement())
  evConnectorType      String
  outputCurrentType    String
  supplyInput          String
  maximumOutputCurrent String
  maximumOutputPower   String
  evChargingLevels     String
  primaryCountries     String
}

model Action {
  id              Int      @id @default(autoincrement()) // Unique ID for each action
  vehicleId       String // ID of the vehicle associated with this action
  severity        String // Severity level (e.g., "Medium")
  description     String // Description of the action
  bestPractice    String // Best practice recommendation
  actionToBeTaken String // Action to be taken
  confirm         Int // Whether the action is confirmed (1 or 0)
  createdDateTime DateTime @map("CreatedDateTime") // Date and time the action was created
  closedDateTime  DateTime @map("ClosedDateTime") // Date and time the action was closed
}

model Benefit {
  id                                 Int    @id @default(autoincrement())
  vin                                String
  vehicleId                          String
  batteryCycleSavingMonthly          Float
  batteryCycleSavingYearly           Float
  batteryCycleSavingLifetime         Float
  costSavingChargingMonthly          Float
  costSavingChargingYearly           Float
  costSavingChargingLifeTimeEstimate Float
  rangeIncreaseMonthly               Float
  rangeIncreaseYearly                Float
  rangeIncreaseLifetimeEstimate      Float
  revenueIncreaseLifetime            Float
  initialSoH                         Float
  ageOfCar                           Int
  estimatedDegradation               Float
  actualDegradation                  Float
  difference                         Float
  loss                               Float
  carType                            String
}

model VehicleChargingDetail {
  id            Int    @id @default(autoincrement())
  model         String
  make          String
  year          Int
  chargeType    String
  chargingPoint String
  maxPower      String
  power         String
  time          String
  rate          String
  range1        Int
  range2        Int
  rateSocTime   String
}

enum CouponDuration {
  FOREVER
  ONCE
  REPEATING
}

enum SupportDepartamentType {
  BILLING
  SALES
  SUPPORT
}

enum SupportTicketStatusType {
  OPEN
  UNDER_REVIEW
  AWAITING_RESPONSE
  CLOSED
  REOPENED
  CANCELED
}

enum MarketingEmailListType {
  PLATFORM
  CHURCH
  MINISTRY
  BUSINESS
  ARTIST
  OTHER
}

enum MovementAmountType {
  DEBIT
  CREDIT
}

enum InvoiceModelType {
  MEMBERSHIP
  SERVICE
  DEPOSIT
}

enum UserNoteScopeType {
  PERSON
  CHURCH
  MINISTRY
  BUSINESS
  ARTIST
  PLATFORM
}

enum NotificationType {
  MESSAGE
  MENTION
  FOLLOW
  ALERT
  ACCOUNT
  PUBLICATION
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
  DELETED
  PENDING
  INACTIVE
}

enum PublicationContentType {
  TEXT
  VIDEO
  GALLERY
  LINK
  CUSTOM
  DISCUSSION
}

enum PublicationType {
  STATUS
  VIDEO
  ARTICLE
  EVENT
  BIBLE
  NOTICE
  ORATION
  ADS
  DISCUSSION
}

enum PublicationFunctionType {
  POST
  COMMENT
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
  DRAFT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  EXPIRED
}

enum ScopeType {
  USER
  CLIENT
  ADMIN
  SUPERADMIN
}

enum frequencyType {
  TRIENNIALLY
  BIANNUAL
  QUARTERLY
  YEARLY
  SEMIANNUAL
  MONTHLY
  BIMONTHLY
  WEEKLY
  DAILY
  LIFETIME
}

enum ServiceType {
  HOSTING
  VPS
  LICENSING
  DOMAIN
  DEVELOPMENT
  DESIGN
  MARKETING
  CONSULTING
}
