datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id                   Int                     @id @default(autoincrement())
  externalId           String?                 @unique
  email                String?                 @db.VarChar(255)
  name                 String?                 @db.VarChar(255)
  avatar               String?                 @db.VarChar(255)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  Amounts              UserAmounts[]
  UserSetting          UserSetting[]
  refer                Referral[]              @relation("refer")
  referredBy           Referral[]              @relation("referred")
  Notification         Notification[]
  Membership           Membership[]
  UserStatus           UserStatus[]
  UserNotes            UserNotes[]
  invoices             Invoice[]
  UserCapabilities     UserCapabilities[]
  SupportTicket        SupportTicket[]
  SupportTicketMessage SupportTicketMessage[]
  StripeCustomer       StripeCustomer[]
  permissions          Permission[]
  AmountsMovements     AdminMovementsAmounts[]
  coupons              Coupon[]
  vehicles             Vehicle[]
}

model StripeCustomer {
  id         Int      @id @default(autoincrement())
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@index([userId])
}

model Invoice {
  id                     Int              @id @default(autoincrement())
  type                   InvoiceModelType @default(MEMBERSHIP)
  membershipId           Int?
  serviceId              Int?
  status                 InvoiceStatus    @default(PENDING)
  userId                 Int?
  currencyId             Int              @default(1)
  userCustomerExternalId String?          @db.VarChar(512)
  gateway                String?          @db.VarChar(56)
  gatewayId              String?          @db.VarChar(512)
  details                String?          @db.VarChar(512)
  invoiceUrl             String?          @db.VarChar(512)
  invoicePdfUrl          String?          @db.VarChar(512)
  subscriptionExternalId String?          @db.VarChar(512)
  paidAt                 DateTime?
  notifiedAt             DateTime?
  dueAt                  DateTime?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  user                   User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Currency               AdminCurrencies  @relation(fields: [currencyId], references: [id])
  Items                  InvoiceItem[]
  coupons                Coupon[]

  @@index([userId, currencyId, serviceId])
}

model Coupon {
  id                Int              @id @default(autoincrement())
  userId            Int?
  name              String
  code              String           @unique
  amountOff         Float?
  duration          CouponDuration   @default(FOREVER)
  durationInMonths  Int?
  maxRedemptions    Int?
  percentOff        Float?
  status            String           @default("ACTIVE")
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  AdminCurrencies   AdminCurrencies? @relation(fields: [adminCurrenciesId], references: [id])
  adminCurrenciesId Int?
  settings          CouponSettings[]
  invoices          Invoice[]

  @@index([userId])
}

model CouponSettings {
  id        Int      @id @default(autoincrement())
  couponId  Int
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  name      String
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

enum CouponDuration {
  FOREVER
  ONCE
  REPEATING
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  currencies  String?  @db.Text
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  name        String
  description String?
  modelType   String?
  modelId     Int?
  pricingBdId Int?
  pricingId   String?
  images      String?  @db.Text
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model UserStatus {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(512)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  statusUntil DateTime

  @@index([userId])
}

model Membership {
  id               Int              @id @default(autoincrement())
  userId           Int              @unique
  plan             Plan             @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId           Int
  pricingId        Int?
  pricing          Pricing?         @relation(fields: [pricingId], references: [id], onDelete: Cascade)
  currencyId       Int?             @default(1)
  currency         AdminCurrencies? @relation(fields: [currencyId], references: [id])
  startDate        DateTime
  endDateFreeTrial DateTime?
  endDate          DateTime
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, pricingId])
}

model Plan {
  id               Int                @id @default(autoincrement())
  name             String
  stripeProductId  String?
  freeTrialDays    Int?
  status           String             @default("ACTIVE")
  description      String?            @db.Text
  Membership       Membership[]
  PlanCapabilities PlanCapabilities[]
  Permission       Permission[]
  pricing          Pricing[]
}

model Pricing {
  id         Int              @id @default(autoincrement())
  frequency  frequencyType    @default(YEARLY)
  status     String           @default("ACTIVE")
  price      Float
  oldPrice   Float?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Plan       Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId     Int?
  serviceId  Int?
  settings   PricingSetting[]
  Membership Membership[]

  @@index([planId, serviceId])
}

model PricingSetting {
  id           Int      @id @default(autoincrement())
  settingName  String
  settingValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Pricing      Pricing? @relation(fields: [pricingId], references: [id])
  pricingId    Int?

  @@index([pricingId])
}

//*************************** ACL ***************************// 
model Module {
  id          Int          @id @default(autoincrement())
  name        String
  scope       ScopeType    @default(SUPERADMIN)
  status      Status       @default(ACTIVE)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Permission  Permission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  users       User[]
  Module      Module[]
  Plan        Plan[]
}

//*************************** END ACL ***************************//
model AdminKpi {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id         Int  @id @default(autoincrement())
  refer      User @relation("refer", fields: [referId], references: [id], onDelete: Cascade)
  referId    Int
  referred   User @relation("referred", fields: [referredId], references: [id])
  referredId Int

  @@index([referId, referredId])
}

model Capabilitie {
  id               Int                @id @default(autoincrement())
  name             String
  title            String?
  description      String?            @db.Text
  type             String             @default("LIMIT")
  PlanCapabilities PlanCapabilities[]
  UserCapabilities UserCapabilities[]
}

model PlanCapabilities {
  id            Int         @id @default(autoincrement())
  capabilitieId Int
  planId        Int
  count         Int
  name          String?
  plan          Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  capabilitie   Capabilitie @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)

  @@index([planId, capabilitieId])
}

model UserCapabilities {
  id            Int         @id @default(autoincrement())
  capabilitieId Int
  userId        Int
  count         Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  capabilitie   Capabilitie @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)

  @@index([userId, capabilitieId])
}

model UserSetting {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  settingName  String @db.VarChar(128)
  settingValue String @db.Text

  @@index([userId])
}

model SuperAdminSetting {
  id           Int    @id @default(autoincrement())
  settingName  String @db.VarChar(128)
  settingValue String @db.Text
}

model CronJobs {
  id        Int      @id @default(autoincrement())
  name      String
  error     String?  @db.Text
  excuteAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNotes {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  scope     UserNoteScopeType @default(PLATFORM)
  userId    Int
  noteName  String            @db.VarChar(128)
  noteValue String

  @@index([userId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  content   String
  image     String
  viewed    Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminCurrencies {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(11)
  main                  Int                     @default(0)
  code                  String                  @db.VarChar(11)
  rate                  Float
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  UserAmounts           UserAmounts[]
  AdminMovementsAmounts AdminMovementsAmounts[]
  invoices              Invoice[]
  Membership            Membership[]
  Coupon                Coupon[]
}

model UserAmounts {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  Currency       AdminCurrencies @relation(fields: [currencyId], references: [id])
  currencyId     Int             @default(1)
  amount         Float           @default(0)
  amount_pending Float           @default(0)
  amount_stopad  Float           @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([currencyId])
}

model AdminMovementsAmounts {
  id         BigInt             @id @default(autoincrement())
  userId     Int?
  user       User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  details    String             @db.VarChar(128)
  Currency   AdminCurrencies    @relation(fields: [currencyId], references: [id])
  currencyId Int
  amount     Float
  type       MovementAmountType @default(CREDIT)
  status     Status             @default(COMPLETED)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([currencyId])
}

model SupportTicket {
  id          Int                     @id @default(autoincrement())
  subject     String
  departament SupportDepartamentType  @default(SALES)
  status      SupportTicketStatusType @default(OPEN)
  userId      Int?
  user        User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  SupportTicketMessage SupportTicketMessage[]

  @@index([userId])
}

model SupportTicketMessage {
  id                          Int                           @id @default(autoincrement())
  ticketId                    Int
  userId                      Int?
  ticket                      SupportTicket                 @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  SupportTicketMessageContent SupportTicketMessageContent[]

  @@index([ticketId, userId])
}

model SupportTicketMessageContent {
  id        Int                    @id @default(autoincrement())
  messageId Int
  type      PublicationContentType @default(TEXT)
  ticket    SupportTicketMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  content   String                 @db.Text
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@index([messageId])
}

model EnodeToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// { Currently Using Different Schema }
// model Vehicle {
//   id                   String                 @id
//   make                 String
//   model                String
//   year                 Int
//   vin                  String? // Optional field if "vehicle.information.vin" can be null
//   odometer             Float? // Optional field if "vehicle.odometer.distance" can be null
//   batteryCapacity      Float? // Optional field if "vehicle.chargeState.batteryCapacity" can be null
//   ownerId              Int
//   owner                User                   @relation(fields: [ownerId], references: [id])
//   dateOfConnection     DateTime // Store date of connection
//   soc                  Float? // Assuming battery level is always present
//   createdAt            DateTime               @default(now())
//   updatedAt            DateTime               @default(now())
//   VehicleDashboardData VehicleDashboardData[]
// }

// model VehicleDashboardData {
//   id                    Int      @id @default(autoincrement())
//   vehicleId             String?  @unique
//   vehicle               Vehicle? @relation(fields: [vehicleId], references: [id])
//   location              String   @default("Banglore")
//   datapointsCollected   Int      @default(1410)
//   totalEnergyConsumed   Float // Total energy consumed in kWh
//   averageSoC            Float // Average State of Charge (%)
//   connectorType         String // Type of connector
//   totalChargingSessions Int // Total charging sessions
//   averageChargingRate   Float // Average charging rate in kW
//   avgDailyKmDriven      Int // Average daily kilometers driven
//   temperatureLow        Int // Low temperature in Celsius
//   temperatureHigh       Int // High temperature in Celsius
//   socRangeMin           Int // Minimum State of Charge (%)
//   socRangeMax           Int // Maximum State of Charge (%)
//   rangeObservedMin      Int // Minimum observed range in km
//   rangeObservedMax      Int // Maximum observed range in km
//   realRangeObserved     Int // Real observed range in km
//   epaProvidedRange      Int
//   batteryHealthSoH      Float // Battery State of Health (%)
//   estimatedDegradation  Float // Estimated battery degradation (%)
//   batteryChemistry      String   @default("Li-ion") // Battery chemistry
//   endOfLife             DateTime // End of life date
//   remainingUsefulLife   Int // Remaining useful life in cycle
// }

// model Car {
//   id                  Int     @id @default(autoincrement())
//   brand               String
//   model               String
//   year                String
//   type                String
//   integration_status  String
//   activation_required String?
//   regions             String
//   reliability         String
//   capabilities        String
//   information         String
//   charge_state        String
//   location            String
//   start_stop_commands String
//   smart_charging      String
//   scheduling          String
//   statistics          String
// }

// { new Schemas for steps, cars and all }
model Vehicle {
  id                                       String               @id // Unique ID for each vehicle detail
  vin                                      String?              @unique // Vehicle Identification Number
  vehicleId                                String?              @unique // ID of the vehicle
  model                                    String? // Vehicle model
  year                                     Int? // Year of the vehicle
  batteryCapacity                          Int? // Battery capacity in kWh
  ownerID                                  Int? // Owner ID
  soc                                      Int? // State of Charge percentage
  dateOfConnection                         DateTime             @map("dateOfConnection") // Date of connection
  odometerFloat                            Float? // Odometer reading
  usageAverageDailyKmDriven                Float[] // Array of average daily km driven
  monthlyUsage                             Float[] // Array of monthly usage
  condition                                String? // Condition of the vehicle (e.g., "Good")
  status                                   String? // Status of the vehicle (e.g., "Active")
  make                                     String? // Vehicle make
  batteryHealthSoH                         Float? // State of Health of the battery
  batteryHealthDegradation                 Float? // Degradation of the battery
  location                                 String? // Location (e.g., "Bangalore, India")
  soh                                      Float[] // Array of state of health values
  batteryHealthAverageEstimatedDegradation Float[] // Array of estimated degradation values
  batteryHealthAverageSoC                  Float? // Average State of Charge of the battery
  batteryHealthTotalBatteries              Int? // Total number of batteries
  connectorType                            String? // Type of connector (e.g., "Rapid")
  endOfLife                                String? // End of life estimate
  realRangeObserved                        Int? // Observed real range
  remainingUsefulLife                      String? // Remaining useful life estimate
  totalChargingSession                     Int? // Total number of charging sessions
  totalEnergyConsumed                      String? // Total energy consumed
  vehicleConditionCritical                 Int? // Critical condition count
  vehicleConditionGood                     Int? // Good condition count
  vehicleConditionSatisfactory             Int? // Satisfactory condition count
  vehicleStatusActive                      Int? // Active status count
  vehicleStatusCharging                    Int? // Charging status count
  vehicleStatusInUse                       Int? // In-use status count
  vehicleStatusOutOfService                Int? // Out-of-service status count
  epawltpProvidedRange                     Int? // Provided range (EPA WLTP)
  usageRangeObservedMax                    Int? // Maximum observed range
  usageRangeObservedMin                    Int? // Minimum observed range
  usageSoCRangeMax                         Int? // Maximum state of charge range
  usageSoCRangeMin                         Int? // Minimum state of charge range
  usageTemperatureHigh                     Int? // Maximum temperature observed
  usageTemperatureLow                      Int? // Minimum temperature observed
  batteryChemistry                         String? // Chemistry of the battery (e.g., "Lithium-ion")
  batteryHealthAverageSoH                  Float? // Average state of health of the battery
  dataPointsCollected                      Int? // Number of data points collected
  averageMonthlyUsage                      Float? // Average monthly usage
  ownerId                                  Int
  chargingSessions                         ChargingSession[]
  tripSessions                             VehicleTripSession[]
  owner                                    User                 @relation(fields: [ownerId], references: [id])
}

model Benefit {
  id                                 Int    @id @default(autoincrement()) // Unique ID for each benefit
  vin                                String // Vehicle Identification Number
  vehicleId                          String // ID of the vehicle associated with this benefit
  batteryCycleSavingMonthly          Float // Monthly battery cycle savings
  batteryCycleSavingYearly           Float // Yearly battery cycle savings
  batteryCycleSavingLifetime         Float // Lifetime battery cycle savings
  costSavingChargingMonthly          Float // Monthly cost savings from charging
  costSavingChargingYearly           Float // Yearly cost savings from charging
  costSavingChargingLifeTimeEstimate Float // Lifetime estimated cost savings
  rangeIncreaseMonthly               Float // Monthly range increase
  rangeIncreaseYearly                Float // Yearly range increase
  rangeIncreaseLifetimeEstimate      Float // Lifetime estimated range increase
  revenueIncreaseLifetime            Float // Lifetime revenue increase
  initialSoH                         Float // Initial state of health
  ageOfCar                           Int // Age of the car in years
  estimatedDegradation               Float // Estimated degradation percentage
  actualDegradation                  Float // Actual degradation percentage
  difference                         Float // Difference in degradation
  loss                               Float // Financial loss associated
  carType                            String // Type of car (e.g., "Audi")
}

model ChargerMaster {
  id               Int               @id @default(autoincrement()) // Unique ID for each charger
  chargerID        Int               @unique
  chargerLocation  String // Location in "latitude,longitude" format
  chargerStatus    String // e.g., "Active" or "Inactive"
  dateJoining      DateTime          @map("dateJoining") // Date the charger joined
  chargeType       String // Type of charging (e.g., "Default")
  chargingPoint    String // Charging point (e.g., "Default")
  chargingSessions ChargingSession[]
}

model ChargerType {
  id                   Int    @id @default(autoincrement()) // Unique ID for each charger type
  evConnectorType      String // Type of EV connector
  outputCurrentType    String // Type of output current
  supplyInput          String // Supply input details
  maximumOutputCurrent String // Max output current details
  maximumOutputPower   String // Max output power details
  evChargingLevels     String // Levels of charging (e.g., Level 1, Level 2)
  primaryCountries     String // Primary countries where the charger is used
}

model Action {
  id              Int      @id @default(autoincrement()) // Unique ID for each action
  vehicleId       String // ID of the vehicle associated with this action
  severity        String // Severity level (e.g., "Medium")
  description     String // Description of the action
  bestPractice    String // Best practice recommendation
  actionToBeTaken String // Action to be taken
  confirm         Boolean // Whether the action is confirmed (1 or 0)
  createdDateTime DateTime @map("CreatedDateTime") // Date and time the action was created
  closedDateTime  DateTime @map("ClosedDateTime") // Date and time the action was closed
  vin             String // Vehicle Identification Number
}

model VehicleChargingDetail {
  id            Int    @id @default(autoincrement()) // Unique ID for each vehicle charging detail
  model         String // Vehicle model
  make          String // Vehicle make
  year          Int // Year of the vehicle
  chargeType    String // Type of charge (e.g., "Default")
  chargingPoint String // Type of charging point (e.g., "Default")
  maxPower      String // Maximum power details
  power         String // Power rating
  time          String // Charging time (e.g., "11h30m")
  rate          String // Rate of charging (e.g., "44 km/h")
  range1        Int // First range value
  range2        Int // Second range value
  rateSocTime   String // Rate of state of charge time (e.g., "8.69 %/hr")
}

// Add new ChargingSession model
model ChargingSession {
  id                Int           @id @default(autoincrement())
  charger           ChargerMaster @relation(fields: [chargerId], references: [chargerID])
  chargerId         Int
  vehicle           Vehicle       @relation(fields: [vehicleId], references: [vehicleId])
  vehicleId         String
  chargingDate      DateTime
  duration          Int // Duration in minutes
  chargingStartTime DateTime
  chargingEndTime   DateTime
  powerConsumed     Float // in kWh
  vehicleStartSoc   Int // Starting State of Charge percentage
  vehicleEndSoc     Int // Ending State of Charge percentage
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([chargerId])
  @@index([vehicleId])
}

// Add new VehicleTripSession model
model VehicleTripSession {
  id                  Int      @id @default(autoincrement())
  vehicle            Vehicle   @relation(fields: [vehicleId], references: [vehicleId])
  vehicleId          String
  startTime          DateTime
  endTime            DateTime
  tripDuration       Int       // Duration in minutes
  startSoc           Int       // Starting State of Charge percentage
  endSoc             Int       // Ending State of Charge percentage
  chargeConsumed     Float     // in kWh
  odometerStart      Float     // Starting odometer reading
  odometerEnd        Float     // Ending odometer reading
  distanceTravelled  Float     // Distance in kilometers/miles
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([vehicleId])
}



// model AggregatedDashboard {
//   id           Int @id
//   active       Int
//   inActive     Int
//   charging     Int
//   outOfService Int
//   critical     Int
//   satisfactory Int
//   good         Int
// }

//Car rental 

enum SupportDepartamentType {
  BILLING
  SALES
  SUPPORT
}

enum SupportTicketStatusType {
  OPEN
  UNDER_REVIEW
  AWAITING_RESPONSE
  CLOSED
  REOPENED
  CANCELED
}

enum MarketingEmailListType {
  PLATFORM
  CHURCH
  MINISTRY
  BUSINESS
  ARTIST
  OTHER
}

enum MovementAmountType {
  DEBIT
  CREDIT
}

enum InvoiceModelType {
  MEMBERSHIP
  SERVICE
  DEPOSIT
}

enum UserNoteScopeType {
  PERSON
  CHURCH
  MINISTRY
  BUSINESS
  ARTIST
  PLATFORM
}

enum NotificationType {
  MESSAGE
  MENTION
  FOLLOW
  ALERT
  ACCOUNT
  PUBLICATION
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
  DELETED
  PENDING
  INACTIVE
}

enum PublicationContentType {
  TEXT
  VIDEO
  GALLERY
  LINK
  CUSTOM
  DISCUSSION
}

enum PublicationType {
  STATUS
  VIDEO
  ARTICLE
  EVENT
  BIBLE
  NOTICE
  ORATION
  ADS
  DISCUSSION
}

enum PublicationFunctionType {
  POST
  COMMENT
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
  DRAFT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  EXPIRED
}

enum ScopeType {
  USER
  CLIENT
  ADMIN
  SUPERADMIN
}

enum frequencyType {
  TRIENNIALLY
  BIANNUAL
  QUARTERLY
  YEARLY
  SEMIANNUAL
  MONTHLY
  BIMONTHLY
  WEEKLY
  DAILY
  LIFETIME
}

enum ServiceType {
  HOSTING
  VPS
  LICENSING
  DOMAIN
  DEVELOPMENT
  DESIGN
  MARKETING
  CONSULTING
}
